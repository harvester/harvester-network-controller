/*
Copyright 2019 Harvester Network Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/harvester/harvester-network-controller/pkg/apis/network.harvesterhci.io/v1beta1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type VlanStatusHandler func(string, *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error)

type VlanStatusController interface {
	generic.ControllerMeta
	VlanStatusClient

	OnChange(ctx context.Context, name string, sync VlanStatusHandler)
	OnRemove(ctx context.Context, name string, sync VlanStatusHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() VlanStatusCache
}

type VlanStatusClient interface {
	Create(*v1beta1.VlanStatus) (*v1beta1.VlanStatus, error)
	Update(*v1beta1.VlanStatus) (*v1beta1.VlanStatus, error)
	UpdateStatus(*v1beta1.VlanStatus) (*v1beta1.VlanStatus, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1beta1.VlanStatus, error)
	List(opts metav1.ListOptions) (*v1beta1.VlanStatusList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.VlanStatus, err error)
}

type VlanStatusCache interface {
	Get(name string) (*v1beta1.VlanStatus, error)
	List(selector labels.Selector) ([]*v1beta1.VlanStatus, error)

	AddIndexer(indexName string, indexer VlanStatusIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.VlanStatus, error)
}

type VlanStatusIndexer func(obj *v1beta1.VlanStatus) ([]string, error)

type vlanStatusController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewVlanStatusController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) VlanStatusController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &vlanStatusController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromVlanStatusHandlerToHandler(sync VlanStatusHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.VlanStatus
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.VlanStatus))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *vlanStatusController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.VlanStatus))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateVlanStatusDeepCopyOnChange(client VlanStatusClient, obj *v1beta1.VlanStatus, handler func(obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error)) (*v1beta1.VlanStatus, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *vlanStatusController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *vlanStatusController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *vlanStatusController) OnChange(ctx context.Context, name string, sync VlanStatusHandler) {
	c.AddGenericHandler(ctx, name, FromVlanStatusHandlerToHandler(sync))
}

func (c *vlanStatusController) OnRemove(ctx context.Context, name string, sync VlanStatusHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromVlanStatusHandlerToHandler(sync)))
}

func (c *vlanStatusController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *vlanStatusController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *vlanStatusController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *vlanStatusController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *vlanStatusController) Cache() VlanStatusCache {
	return &vlanStatusCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *vlanStatusController) Create(obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error) {
	result := &v1beta1.VlanStatus{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *vlanStatusController) Update(obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error) {
	result := &v1beta1.VlanStatus{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *vlanStatusController) UpdateStatus(obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error) {
	result := &v1beta1.VlanStatus{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *vlanStatusController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *vlanStatusController) Get(name string, options metav1.GetOptions) (*v1beta1.VlanStatus, error) {
	result := &v1beta1.VlanStatus{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *vlanStatusController) List(opts metav1.ListOptions) (*v1beta1.VlanStatusList, error) {
	result := &v1beta1.VlanStatusList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *vlanStatusController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *vlanStatusController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.VlanStatus, error) {
	result := &v1beta1.VlanStatus{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type vlanStatusCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *vlanStatusCache) Get(name string) (*v1beta1.VlanStatus, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.VlanStatus), nil
}

func (c *vlanStatusCache) List(selector labels.Selector) (ret []*v1beta1.VlanStatus, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VlanStatus))
	})

	return ret, err
}

func (c *vlanStatusCache) AddIndexer(indexName string, indexer VlanStatusIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.VlanStatus))
		},
	}))
}

func (c *vlanStatusCache) GetByIndex(indexName, key string) (result []*v1beta1.VlanStatus, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.VlanStatus, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.VlanStatus))
	}
	return result, nil
}

type VlanStatusStatusHandler func(obj *v1beta1.VlanStatus, status v1beta1.VlStatus) (v1beta1.VlStatus, error)

type VlanStatusGeneratingHandler func(obj *v1beta1.VlanStatus, status v1beta1.VlStatus) ([]runtime.Object, v1beta1.VlStatus, error)

func RegisterVlanStatusStatusHandler(ctx context.Context, controller VlanStatusController, condition condition.Cond, name string, handler VlanStatusStatusHandler) {
	statusHandler := &vlanStatusStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromVlanStatusHandlerToHandler(statusHandler.sync))
}

func RegisterVlanStatusGeneratingHandler(ctx context.Context, controller VlanStatusController, apply apply.Apply,
	condition condition.Cond, name string, handler VlanStatusGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &vlanStatusGeneratingHandler{
		VlanStatusGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterVlanStatusStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type vlanStatusStatusHandler struct {
	client    VlanStatusClient
	condition condition.Cond
	handler   VlanStatusStatusHandler
}

func (a *vlanStatusStatusHandler) sync(key string, obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type vlanStatusGeneratingHandler struct {
	VlanStatusGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *vlanStatusGeneratingHandler) Remove(key string, obj *v1beta1.VlanStatus) (*v1beta1.VlanStatus, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.VlanStatus{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *vlanStatusGeneratingHandler) Handle(obj *v1beta1.VlanStatus, status v1beta1.VlStatus) (v1beta1.VlStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.VlanStatusGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
