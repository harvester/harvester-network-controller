/*
Copyright 2019 Harvester Network Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/harvester/harvester-network-controller/pkg/apis/network.harvesterhci.io/v1beta1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type NodeNetworkHandler func(string, *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error)

type NodeNetworkController interface {
	generic.ControllerMeta
	NodeNetworkClient

	OnChange(ctx context.Context, name string, sync NodeNetworkHandler)
	OnRemove(ctx context.Context, name string, sync NodeNetworkHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() NodeNetworkCache
}

type NodeNetworkClient interface {
	Create(*v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error)
	Update(*v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error)
	UpdateStatus(*v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1beta1.NodeNetwork, error)
	List(opts metav1.ListOptions) (*v1beta1.NodeNetworkList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeNetwork, err error)
}

type NodeNetworkCache interface {
	Get(name string) (*v1beta1.NodeNetwork, error)
	List(selector labels.Selector) ([]*v1beta1.NodeNetwork, error)

	AddIndexer(indexName string, indexer NodeNetworkIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.NodeNetwork, error)
}

type NodeNetworkIndexer func(obj *v1beta1.NodeNetwork) ([]string, error)

type nodeNetworkController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewNodeNetworkController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) NodeNetworkController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &nodeNetworkController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromNodeNetworkHandlerToHandler(sync NodeNetworkHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.NodeNetwork
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.NodeNetwork))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *nodeNetworkController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.NodeNetwork))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateNodeNetworkDeepCopyOnChange(client NodeNetworkClient, obj *v1beta1.NodeNetwork, handler func(obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error)) (*v1beta1.NodeNetwork, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *nodeNetworkController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *nodeNetworkController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *nodeNetworkController) OnChange(ctx context.Context, name string, sync NodeNetworkHandler) {
	c.AddGenericHandler(ctx, name, FromNodeNetworkHandlerToHandler(sync))
}

func (c *nodeNetworkController) OnRemove(ctx context.Context, name string, sync NodeNetworkHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromNodeNetworkHandlerToHandler(sync)))
}

func (c *nodeNetworkController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *nodeNetworkController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *nodeNetworkController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *nodeNetworkController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *nodeNetworkController) Cache() NodeNetworkCache {
	return &nodeNetworkCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *nodeNetworkController) Create(obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error) {
	result := &v1beta1.NodeNetwork{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *nodeNetworkController) Update(obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error) {
	result := &v1beta1.NodeNetwork{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *nodeNetworkController) UpdateStatus(obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error) {
	result := &v1beta1.NodeNetwork{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *nodeNetworkController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *nodeNetworkController) Get(name string, options metav1.GetOptions) (*v1beta1.NodeNetwork, error) {
	result := &v1beta1.NodeNetwork{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *nodeNetworkController) List(opts metav1.ListOptions) (*v1beta1.NodeNetworkList, error) {
	result := &v1beta1.NodeNetworkList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *nodeNetworkController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *nodeNetworkController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.NodeNetwork, error) {
	result := &v1beta1.NodeNetwork{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type nodeNetworkCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *nodeNetworkCache) Get(name string) (*v1beta1.NodeNetwork, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.NodeNetwork), nil
}

func (c *nodeNetworkCache) List(selector labels.Selector) (ret []*v1beta1.NodeNetwork, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NodeNetwork))
	})

	return ret, err
}

func (c *nodeNetworkCache) AddIndexer(indexName string, indexer NodeNetworkIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.NodeNetwork))
		},
	}))
}

func (c *nodeNetworkCache) GetByIndex(indexName, key string) (result []*v1beta1.NodeNetwork, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.NodeNetwork, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.NodeNetwork))
	}
	return result, nil
}

type NodeNetworkStatusHandler func(obj *v1beta1.NodeNetwork, status v1beta1.NodeNetworkStatus) (v1beta1.NodeNetworkStatus, error)

type NodeNetworkGeneratingHandler func(obj *v1beta1.NodeNetwork, status v1beta1.NodeNetworkStatus) ([]runtime.Object, v1beta1.NodeNetworkStatus, error)

func RegisterNodeNetworkStatusHandler(ctx context.Context, controller NodeNetworkController, condition condition.Cond, name string, handler NodeNetworkStatusHandler) {
	statusHandler := &nodeNetworkStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromNodeNetworkHandlerToHandler(statusHandler.sync))
}

func RegisterNodeNetworkGeneratingHandler(ctx context.Context, controller NodeNetworkController, apply apply.Apply,
	condition condition.Cond, name string, handler NodeNetworkGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &nodeNetworkGeneratingHandler{
		NodeNetworkGeneratingHandler: handler,
		apply:                        apply,
		name:                         name,
		gvk:                          controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterNodeNetworkStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type nodeNetworkStatusHandler struct {
	client    NodeNetworkClient
	condition condition.Cond
	handler   NodeNetworkStatusHandler
}

func (a *nodeNetworkStatusHandler) sync(key string, obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type nodeNetworkGeneratingHandler struct {
	NodeNetworkGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *nodeNetworkGeneratingHandler) Remove(key string, obj *v1beta1.NodeNetwork) (*v1beta1.NodeNetwork, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.NodeNetwork{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *nodeNetworkGeneratingHandler) Handle(obj *v1beta1.NodeNetwork, status v1beta1.NodeNetworkStatus) (v1beta1.NodeNetworkStatus, error) {
	objs, newStatus, err := a.NodeNetworkGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
